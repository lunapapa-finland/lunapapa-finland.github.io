<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://lunapapa-finland.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://lunapapa-finland.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-12-24T12:13:25+00:00</updated><id>https://lunapapa-finland.github.io/feed.xml</id><title type="html">blank</title><subtitle></subtitle><entry><title type="html">ROS2 Structure and Communication</title><link href="https://lunapapa-finland.github.io/blog/2023/ROS2-architecture/" rel="alternate" type="text/html" title="ROS2 Structure and Communication"/><published>2023-12-08T19:53:00+00:00</published><updated>2023-12-08T19:53:00+00:00</updated><id>https://lunapapa-finland.github.io/blog/2023/ROS2-architecture</id><content type="html" xml:base="https://lunapapa-finland.github.io/blog/2023/ROS2-architecture/"><![CDATA[<h1 id="understanding-ros-2-structure-and-communication">Understanding ROS 2: Structure and Communication</h1> <p>ROS 2, the second version of the Robot Operating System, is a powerful framework for building robotic systems. It comes with improved features and enhanced communication mechanisms compared to its predecessor. In this guide, we’ll delve into the fundamental structure of ROS 2 and explore how nodes communicate with each other.</p> <h2 id="ros-2-architecture-overview">ROS 2 Architecture Overview</h2> <p>ROS 2 adopts a modular and distributed architecture that enables better scalability and flexibility. The key components include:</p> <h3 id="1-nodes">1. Nodes</h3> <p>Nodes are fundamental units in ROS 2 that perform specific tasks. Each node is an independent process responsible for a particular aspect of the robot’s functionality. For instance, you might have nodes for sensor processing, motor control, or high-level decision-making.</p> <h3 id="2-topics">2. Topics</h3> <p>Topics facilitate communication between nodes in a publish-subscribe manner. Nodes can publish messages to a topic, and other nodes can subscribe to receive those messages. This decoupled communication allows for a flexible and modular system.</p> <p><img src="images/ros2_topics.png" alt="ROS 2 Topics"/></p> <h3 id="3-services">3. Services</h3> <p>Services provide a request-response communication pattern. A node can offer a service, and other nodes can call that service to request specific functionalities. It’s a synchronous communication mechanism suitable for scenarios where a direct response is needed.</p> <p><img src="images/ros2_services.png" alt="ROS 2 Services"/></p> <h3 id="4-actions">4. Actions</h3> <p>Actions are an extended form of services but with asynchronous behavior. They allow nodes to perform long-running tasks while providing feedback to the caller. Actions are useful for actions such as moving a robot to a specific location.</p> <p><img src="images/ros2_actions.png" alt="ROS 2 Actions"/></p> <h2 id="setting-up-a-simple-ros-2-node">Setting Up a Simple ROS 2 Node</h2> <p>Let’s create a simple ROS 2 node to understand the basic structure. Assume we want to create a node that publishes sensor data to a topic.</p> <h3 id="install-ros-2">Install ROS 2</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Follow ROS 2 installation instructions for your platform</span>
<span class="c"># https://index.ros.org/doc/ros2/Installation/</span>
</code></pre></div></div> <h3 id="create-a-ros-2-workspace">Create a ROS 2 Workspace</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> ~/ros2_ws/src
<span class="nb">cd</span> ~/ros2_ws/src
git clone https://github.com/ros2/examples
<span class="nb">cd</span> ..
colcon build
</code></pre></div></div> <h3 id="create-a-publisher-node">Create a Publisher Node</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: ~/ros2_ws/src/examples/publisher_member_function/publisher_member_function/publisher_member_function/publisher_member_function.py
</span><span class="kn">import</span> <span class="n">rclpy</span>
<span class="kn">from</span> <span class="n">std_msgs.msg</span> <span class="kn">import</span> <span class="n">String</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="n">rclpy</span><span class="p">.</span><span class="nf">init</span><span class="p">(</span><span class="n">args</span><span class="o">=</span><span class="n">args</span><span class="p">)</span>

    <span class="n">node</span> <span class="o">=</span> <span class="n">rclpy</span><span class="p">.</span><span class="nf">create_node</span><span class="p">(</span><span class="sh">'</span><span class="s">simple_publisher</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">publisher</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="nf">create_publisher</span><span class="p">(</span><span class="n">String</span><span class="p">,</span> <span class="sh">'</span><span class="s">topic</span><span class="sh">'</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>

    <span class="n">msg</span> <span class="o">=</span> <span class="nc">String</span><span class="p">()</span>
    <span class="n">msg</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Hello, ROS 2!</span><span class="sh">'</span>

    <span class="k">def</span> <span class="nf">timer_callback</span><span class="p">():</span>
        <span class="k">nonlocal</span> <span class="n">msg</span>
        <span class="n">publisher</span><span class="p">.</span><span class="nf">publish</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
        <span class="n">node</span><span class="p">.</span><span class="nf">get_logger</span><span class="p">().</span><span class="nf">info</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">Publishing: </span><span class="si">{</span><span class="n">msg</span><span class="p">.</span><span class="n">data</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>

    <span class="n">timer_period</span> <span class="o">=</span> <span class="mf">0.5</span>
    <span class="n">timer</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="nf">create_timer</span><span class="p">(</span><span class="n">timer_period</span><span class="p">,</span> <span class="n">timer_callback</span><span class="p">)</span>

    <span class="n">rclpy</span><span class="p">.</span><span class="nf">spin</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>

    <span class="n">node</span><span class="p">.</span><span class="nf">destroy_node</span><span class="p">()</span>
    <span class="n">rclpy</span><span class="p">.</span><span class="nf">shutdown</span><span class="p">()</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div> <h3 id="build-and-run-the-node">Build and Run the Node</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source</span> ~/ros2_ws/install/setup.bash
ros2 run examples publisher_member_function
</code></pre></div></div> <p>This simple node publishes the message “Hello, ROS 2!” to the ‘topic’ at a regular interval.</p> <h2 id="conclusion">Conclusion</h2> <p>Understanding the structure and communication mechanisms of ROS 2 is crucial for developing complex robotic systems. By grasping the basics of nodes, topics, services, and actions, you’ll be well-equipped to build scalable and modular robots using ROS 2.</p> <p>Happy coding!</p>]]></content><author><name></name></author><category term="ROS2"/><category term="formatting"/><category term="blockquotes"/><summary type="html"><![CDATA[ROS2 Structure and Communication]]></summary></entry></feed>